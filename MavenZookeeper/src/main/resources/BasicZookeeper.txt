Zookeeper 分布式服务框架：
分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能

结构：
bin: 运行脚本和工具脚本
conf: 默认读取配置的目录，默认配置文件 zoo.cfg
doces: 相关文档
lib: 核心 jar 包
dist-maven：zookeeper 的 maven 打包目录
recipes：分布式相关 jar 包

启动 Zookeeper：
./bin/zkServer.sh start  // 默认加载配置文件 /conf/zoo.cfg
./bin/zkServer.sh start [配置文件指定路径]

关闭 Zookeeper：
./bin/zkServer.sh stop

Zookeeper 集群角色：
领导者 Leader                      领导者负责进行投票的发起和决议，更新系统状态
                跟随者 Follower    用于接收客户请求并向客户端返回结果，在选主过程中参与投票
学习者 Leaner
                观察者 Observer    Observer 可以接收客户端连接，将写请求转发给 Leader
                                  Observer 不参与投票，只同步 Leader 的状态
                                  Observer 目的是扩展系统，提高读取速度
客户端 Client                      请求发起方
Leader：可以为客户端提供读写服务。
Follower和Observer只能提供读服务，并且Observer不参与Leader选择过程，也不参与’过半写成功‘的策略

ZAB 协议：定义了对于那些会改变Zookeeper服务器数据状态的事务请求的处理方式
  1、所有事务请求必须由一个全局唯一的服务器来协调处理，该服务器被称为 leader 服务器，而余下的其它服务则称为 follower 服务器
  2、leader服务器负责将客户端事务请求转换成一个事务提议，并将提议分发给集群中所有的 follower 服务，之后leader服务器需要等待所有follower服务反馈
  3、一旦超过半数的follower服务进行了正确的反馈后，那么leader服务器机会再次向所有的follower服务分发commit消息，要求将前一个的提议进行提交
ZAB 协议两种模式：
  崩溃恢复：
  消息广播：
ZAB 协议过程：
  1、当整个服务框架在启动过程中，或是当Leader服务器，出现网络故障、崩溃退出与重启等异常情况时，ZAB协议就会进入崩溃恢复模式并选举产生新的Leader服务器；
  2、当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，进入消息广播模式；
  3、这时，如果有一台遵守Zab协议的服务器加入集群，因为此时集群中已经存在一个Leader服务器在广播消息，
     那么该新加入的服务器自动进入恢复模式：找到Leader服务器，并且完成数据同步。同步完成后，作为新的Follower一起参与到消息广播流程中
协议状态切换
  当Leader出现崩溃退出或者机器重启，亦或是集群中不存在超过半数的服务器与Leader保存正常通信，ZAB协议就会再一次进入崩溃恢复，发起新一轮Leader选举并实现数据同步。
  同步完成后又会进入消息广播模式，接收事务请求
保证消息有序
  在整个消息广播中，Leader会将每一个事务请求转换成对应的 proposal 来进行广播，
  并且在广播 事务Proposal 之前，Leader服务器会首先为这个事务Proposal分配一个全局单递增的唯一ID，称之为事务ID（即zxid），
  由于Zab协议需要保证每一个消息的严格的顺序关系，因此必须将每一个proposal按照其zxid的先后顺序进行排序和处理




Zookeeper 优势：
1 .最终一致性：client 不论连接到哪个 Server，展示给它都是同一个视图，这是 zookeeper 最重要的性能。

2 .可靠性：具有简单、健壮、良好的性能，如果消息 m 被到一台服务器接受，那么它将被所有的服务器接受。

3 .实时性：Zookeeper 保证客户端将在一个时间间隔范围内获得服务器的更新信息，或 者服务器失效的信息。但由于网络延时等原因，Zookeeper 不能保证两个客户端能同时得到 刚更新的数据，如果需要最新数据，应该在读数据之前调用 sync() 接口。

4 .等待无关（wait-free）：慢的或者失效的 client 不得干预快速的 client 的请求，使得每个 client 都能有效的等待。

5 .原子性：更新只能成功或者失败，没有中间状态。

6 .顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息 a 在消息 b 前发布，则在所有 Server 上消息 a 都将在消息 b 前被发布；偏序是指如果一个消息 b 在消 息 a 后被同一个发送者发布，a 必将排在 b 前面





